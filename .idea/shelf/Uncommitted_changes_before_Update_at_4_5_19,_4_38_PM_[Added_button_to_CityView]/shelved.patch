Index: app/src/main/res/drawable/ic_filter_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/ic_filter_view.xml	(date 1554503769000)
+++ app/src/main/res/drawable/ic_filter_view.xml	(date 1554503769000)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M10,18h4v-2h-4v2zM3,6v2h18L21,6L3,6zM6,13h12v-2L6,11v2z"/>
+</vector>
Index: app/src/main/java/com/example/findingbook/MapsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.findingbook;\n\nimport android.Manifest;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.location.Address;\nimport android.location.Geocoder;\nimport android.location.Location;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.support.design.widget.NavigationView;\nimport android.support.v4.app.ActivityCompat;\nimport android.support.v4.content.ContextCompat;\nimport android.support.v4.view.GravityCompat;\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.ActionBar;\nimport android.support.v7.app.ActionBarDrawerToggle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.util.Log;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.EditText;\n\nimport com.example.findingbook.dataLayer.DataLayerAccess;\nimport com.example.findingbook.dataLayer.OurAddress;\nimport com.google.android.gms.common.ConnectionResult;\nimport com.google.android.gms.common.api.GoogleApiClient;\nimport com.google.android.gms.location.LocationListener;\nimport com.google.android.gms.location.LocationRequest;\nimport com.google.android.gms.location.LocationServices;\nimport com.google.android.gms.maps.CameraUpdateFactory;\nimport com.google.android.gms.maps.GoogleMap;\nimport com.google.android.gms.maps.OnMapReadyCallback;\nimport com.google.android.gms.maps.SupportMapFragment;\nimport com.google.android.gms.maps.UiSettings;\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory;\nimport com.google.android.gms.maps.model.LatLng;\nimport com.google.android.gms.maps.model.Marker;\nimport com.google.android.gms.maps.model.MarkerOptions;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Locale;\n\n//import android.location.LocationListener;\n\npublic class MapsActivity extends AppCompatActivity implements OnMapReadyCallback,\n        NavigationView.OnNavigationItemSelectedListener\n        ,GoogleMap.OnMarkerClickListener\n        ,GoogleApiClient.ConnectionCallbacks\n        ,GoogleApiClient.OnConnectionFailedListener\n        ,LocationListener {\n\n    private GoogleMap mMap;\n    private UiSettings mUiSettings;\n    private DrawerLayout drawer;\n    private GoogleApiClient googleApiClient;\n    private LocationRequest locationRequest;\n    private Location lastLocation;\n    private Marker currentUserLocationMarker;\n    private static final int Request_User_Location_Code = 99;\n    List<OurAddress> addresses;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_maps);\n\n        //Asks for Permission to access user location\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){\n            checkUserLocationPermission();\n        }\n\n        //Creates the Toolbar for the main bar\n        Toolbar toolbar = findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        ActionBar actionbar = getSupportActionBar();\n        actionbar.setDisplayHomeAsUpEnabled(true);\n\n        //Adds the menu to the toolbar & implements drawer action\n        actionbar.setHomeAsUpIndicator(R.drawable.ic_menu);\n        drawer = (DrawerLayout) findViewById(R.id.drawer_layout);\n        if(drawer != null) {\n            ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer,\n                    toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);\n            drawer.addDrawerListener(toggle);\n            toggle.syncState();\n        }\n\n        //Sets up the layout for menu\n        NavigationView navigationView = findViewById(R.id.nav_view);\n        navigationView.setNavigationItemSelectedListener(this);\n\n\n        // Obtain the SupportMapFragment and get notified when the map is ready to be used.\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\n                .findFragmentById(R.id.map);\n        mapFragment.getMapAsync(this);\n    }\n\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        if(drawer != null) {\n            switch (item.getItemId()) {\n                case android.R.id.home:\n                    drawer.openDrawer(GravityCompat.START);\n                    return true;\n            }\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n\n\n    @Override\n    public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {\n\n\n        DataLayerAccess dbAccess = new DataLayerAccess(this);\n        dbAccess.open();\n        addresses = dbAccess.getAddresses();\n\n        List<Address> addressList = null;\n\n        switch(menuItem.getItemId()) {\n            case R.id.nav_member:\n                Log.d(\"Map Activity\", \"Active One Selected\");\n//                Geocoder geocoder = new Geocoder(this);\n//                for(int i = 0; i < addresses.size(); i++) {\n//                    try {\n//                        addressList = geocoder.getFromLocation(addresses.get(i).getLatitude(),addresses.get(i).getLongitude(),  1);\n//\n//                    } catch (IOException e) {\n//                        e.printStackTrace();\n//                    }\n//                    //Placed a marker to address placed\n//                    if (addressList != null && addressList.size() != 0) {\n//                        Address address = addressList.get(0);\n//                        LatLng latLng = new LatLng(address.getLatitude(), address.getLongitude());\n//                        mMap.addMarker(new MarkerOptions().position(latLng).title(\"Entered Location\"));\n//                    }\n//                }\n                break;\n            case R.id.nav_beingTaught:\n                Log.d(\"Map Activity\", \"Active Two Selected\");\n                break;\n            case R.id.nav_notBeingTaught:\n                Log.d(\"Map Activity\", \"Active Three Selected\");\n                break;\n            case R.id.nav_hasInterest:\n                Log.d(\"Map Activity\", \"Active Four Selected\");\n                break;\n            case R.id.nav_softClosedHeart:\n                Log.d(\"Map Activity\", \"Active Five Selected\");\n                break;\n            case R.id.nav_hardClosedHeart:\n                Log.d(\"Map Activity\", \"Active Six Selected\");\n                break;\n            case R.id.nav_uncontacted:\n                Log.d(\"Map Activity\", \"Active Seven Selected\");\n                break;\n        }\n        return true;\n    }\n\n    @Override\n    public void onBackPressed() {\n        if(drawer.isDrawerOpen(GravityCompat.START)){\n            drawer.closeDrawer(GravityCompat.START);\n        }else{\n            super.onBackPressed();\n        }\n    }\n\n    public void onMapSearch(View view) {\n        //Obtains the address from edit view\n        EditText entered_location = (EditText) findViewById(R.id.location_Entered);\n        String location = entered_location.getText().toString();\n        List<Address> addressList = null;\n\n        //Determines the Address from the input\n        if (location != null || !location.equals(\"\")) {\n            Geocoder geocoder = new Geocoder(this);\n            try {\n                addressList = geocoder.getFromLocationName(location, 1);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n            //Placed a marker to address places\n            if(addressList != null){\n                Address address = addressList.get(0);\n                LatLng latLng = new LatLng(address.getLatitude(), address.getLongitude());\n                mMap.addMarker(new MarkerOptions().position(latLng).title(\"Entered Location\"));\n                mMap.animateCamera(CameraUpdateFactory.newLatLng(latLng));\n                mMap.moveCamera(CameraUpdateFactory.newLatLng(latLng));\n            }\n        }\n    }\n\n    @Override\n    public void onMapReady(GoogleMap googleMap) {\n        mMap = googleMap;\n        mMap.setOnMarkerClickListener(this);\n\n        if(ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED)\n        {\n\n            buildGoogleApiClient();\n            mMap.setMyLocationEnabled(true);\n        }\n\n        //Adds to the interaction with the map\n        mUiSettings = mMap.getUiSettings();\n        mUiSettings.setZoomControlsEnabled(true);\n        mUiSettings.setScrollGesturesEnabled(true);\n        mUiSettings.setZoomGesturesEnabled(true);\n\n\n        mMap.setOnMapLongClickListener(new GoogleMap.OnMapLongClickListener() {\n            @Override\n            public void onMapLongClick(LatLng point) {\n                MarkerOptions options = new MarkerOptions()\n                        .position(point);\n                Marker mMarker = mMap.addMarker(options);\n\n                Geocoder geocoder = new Geocoder(getApplicationContext(), Locale.getDefault());\n                try {\n                    List<Address> addresses = geocoder.getFromLocation(point.latitude, point.longitude, 1);\n                    if (addresses != null && addresses.size() > 0){\n                        System.out.println(\"Address: \" + addresses.get(0).toString());\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n    }\n\n    protected synchronized void buildGoogleApiClient(){\n        googleApiClient = new GoogleApiClient.Builder(this)\n                .addConnectionCallbacks(this)\n                .addOnConnectionFailedListener(this)\n                .addApi(LocationServices.API)\n                .build();\n        googleApiClient.connect();\n\n    }\n\n    public boolean checkUserLocationPermission(){\n        if(ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED){\n            if(ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.ACCESS_FINE_LOCATION)){\n                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, Request_User_Location_Code);\n            }else{\n                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, Request_User_Location_Code);\n            }\n            return false;\n        }else{\n            return true;\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        switch(requestCode){\n            case Request_User_Location_Code:\n                if(grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED){\n                    if(ContextCompat.checkSelfPermission(this,Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED){\n                        if(googleApiClient == null){\n                            buildGoogleApiClient();\n                        }\n                        mMap.setMyLocationEnabled(true);\n                    }\n                }\n                else{\n                    System.out.println(\"Permission Denied\");\n                }\n                return;\n        }\n    }\n\n    public boolean onMarkerClick(final Marker marker){\n        LatLng latlng = marker.getPosition();\n        Geocoder geocoder;\n        List<Address> addresses;\n        geocoder = new Geocoder(this, Locale.getDefault());\n\n        try {\n            addresses = geocoder.getFromLocation(latlng.latitude, latlng.longitude, 1);\n            if (addresses != null) {\n                Intent intent = new Intent(this, PopupView.class);\n                if(addresses.get(0).getAddressLine(0) != null){\n                    String address = addresses.get(0).getFeatureName() + \" \" + addresses.get(0).getThoroughfare();\n                    intent.putExtra(\"ADDRESS_1\", address);\n                }\n                if(addresses.get(0).getLocality() != null){\n                    String city = addresses.get(0).getLocality();\n                    intent.putExtra(\"CITY\", city);\n                }\n                if(addresses.get(0).getAdminArea() != null){\n                    String state = addresses.get(0).getAdminArea();\n                    intent.putExtra(\"STATE\", state);\n                }\n                if(addresses.get(0).getPostalCode() != null){\n                    String postalCode = addresses.get(0).getPostalCode();\n                    intent.putExtra(\"POSTAL_CODE\", postalCode);\n                }\n                startActivity(intent);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        return false;\n    }\n\n    @Override\n    public void onLocationChanged(Location location) {\n\n        lastLocation = location;\n        if (currentUserLocationMarker != null){\n            currentUserLocationMarker.remove();\n        }\n\n        LatLng latLng = new LatLng(location.getLatitude(), location.getLongitude());\n        MarkerOptions markerOptions = new MarkerOptions();\n        markerOptions.position(latLng);\n        markerOptions.title(\"Users Location\");\n        markerOptions.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN));\n\n        currentUserLocationMarker = mMap.addMarker(markerOptions);\n        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(latLng, 14));\n\n        if(googleApiClient != null){\n            LocationServices.FusedLocationApi.removeLocationUpdates(googleApiClient, this);\n        }\n\n    }\n\n\n\n    @Override\n    public void onConnected(@Nullable Bundle bundle) {\n        locationRequest = new LocationRequest();\n        locationRequest.setInterval(1100);\n        locationRequest.setFastestInterval(1100);\n        locationRequest.setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);\n\n        if(ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED){\n\n            LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, this);\n        }\n\n    }\n\n    @Override\n    public void onConnectionSuspended(int i) {\n    }\n\n    @Override\n    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/findingbook/MapsActivity.java	(revision d7e41fa2e7381fc785d075a760fffc6216934c3e)
+++ app/src/main/java/com/example/findingbook/MapsActivity.java	(date 1554503769000)
@@ -19,13 +19,13 @@
 import android.support.v7.app.ActionBarDrawerToggle;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.Toolbar;
-import android.util.Log;
 import android.view.MenuItem;
 import android.view.View;
 import android.widget.EditText;
 
 import com.example.findingbook.dataLayer.DataLayerAccess;
 import com.example.findingbook.dataLayer.OurAddress;
+import com.example.findingbook.filterViews.citiesView.CitiesView;
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.api.GoogleApiClient;
 import com.google.android.gms.location.LocationListener;
@@ -61,8 +61,12 @@
     private LocationRequest locationRequest;
     private Location lastLocation;
     private Marker currentUserLocationMarker;
+    private Marker lastLocationClicked;
+    private List<Marker> MapMarkers;
+    private List<OurAddress> addresses;
     private static final int Request_User_Location_Code = 99;
-    List<OurAddress> addresses;
+    private static final int POPVIEW_ACTIVITY_REQUEST_CODE = 0;
+
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -102,6 +106,46 @@
         mapFragment.getMapAsync(this);
     }
 
+    @Override
+    public void onMapReady(GoogleMap googleMap) {
+        mMap = googleMap;
+        mMap.setOnMarkerClickListener(this);
+
+        if(ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED)
+        {
+
+            buildGoogleApiClient();
+            mMap.setMyLocationEnabled(true);
+        }
+
+        //Adds to the interaction with the map
+        mUiSettings = mMap.getUiSettings();
+        mUiSettings.setZoomControlsEnabled(true);
+        mUiSettings.setScrollGesturesEnabled(true);
+        mUiSettings.setZoomGesturesEnabled(true);
+
+        //Places marker on a map where user held
+        mMap.setOnMapLongClickListener(new GoogleMap.OnMapLongClickListener() {
+            @Override
+            public void onMapLongClick(LatLng point) {
+                MarkerOptions options = new MarkerOptions()
+                        .position(point);
+                Marker mMarker = mMap.addMarker(options);
+
+                Geocoder geocoder = new Geocoder(getApplicationContext(), Locale.getDefault());
+                try {
+                    List<Address> addresses = geocoder.getFromLocation(point.latitude, point.longitude, 1);
+                    if (addresses != null && addresses.size() > 0){
+                        System.out.println("Address: " + addresses.get(0).toString());
+                    }
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
+        });
+
+    }
+
 
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
@@ -120,54 +164,49 @@
     @Override
     public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {
 
+        //If an item is selected in the Navigation Bar
+        switch(menuItem.getItemId()) {
 
-        DataLayerAccess dbAccess = new DataLayerAccess(this);
-        dbAccess.open();
-        addresses = dbAccess.getAddresses();
+            //Drops all known addresses on the Map
+            case R.id.nav_allPins:
+
+                //Access database stores addresses
+                DataLayerAccess dbAccess = new DataLayerAccess(MapsActivity.this);
+                dbAccess.open();
+                addresses = dbAccess.getAddresses();
 
-        List<Address> addressList = null;
+                //Finds the coordinates of the address for the map
+                Geocoder geocoder = new Geocoder(MapsActivity.this);
+                List<Address> addressList = null;
 
-        switch(menuItem.getItemId()) {
-            case R.id.nav_member:
-                Log.d("Map Activity", "Active One Selected");
-//                Geocoder geocoder = new Geocoder(this);
-//                for(int i = 0; i < addresses.size(); i++) {
-//                    try {
-//                        addressList = geocoder.getFromLocation(addresses.get(i).getLatitude(),addresses.get(i).getLongitude(),  1);
-//
-//                    } catch (IOException e) {
-//                        e.printStackTrace();
-//                    }
-//                    //Placed a marker to address placed
-//                    if (addressList != null && addressList.size() != 0) {
-//                        Address address = addressList.get(0);
-//                        LatLng latLng = new LatLng(address.getLatitude(), address.getLongitude());
-//                        mMap.addMarker(new MarkerOptions().position(latLng).title("Entered Location"));
-//                    }
-//                }
+
+                for (int i = 0; i < addresses.size(); i++) {
+                    try {
+                        addressList = geocoder.getFromLocationName(addresses.get(i).getAddress(), 1);
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                    }
+
+                    //If location is found placed
+                    if (addressList != null && addressList.size() != 0) {
+                        Address address = addressList.get(0);
+                        LatLng latLng = new LatLng(address.getLatitude(), address.getLongitude());
+                        mMap.addMarker(new MarkerOptions().position(latLng).title("Entered Location"));
+                    }
+                }
+
+                dbAccess.close();
                 break;
-            case R.id.nav_beingTaught:
-                Log.d("Map Activity", "Active Two Selected");
-                break;
-            case R.id.nav_notBeingTaught:
-                Log.d("Map Activity", "Active Three Selected");
-                break;
-            case R.id.nav_hasInterest:
-                Log.d("Map Activity", "Active Four Selected");
-                break;
-            case R.id.nav_softClosedHeart:
-                Log.d("Map Activity", "Active Five Selected");
-                break;
-            case R.id.nav_hardClosedHeart:
-                Log.d("Map Activity", "Active Six Selected");
-                break;
-            case R.id.nav_uncontacted:
-                Log.d("Map Activity", "Active Seven Selected");
-                break;
+
+            case R.id.nav_citiesView:
+                Intent intent = new Intent(this, CitiesView.class);
+                startActivity(intent);
         }
         return true;
     }
 
+
+
     @Override
     public void onBackPressed() {
         if(drawer.isDrawerOpen(GravityCompat.START)){
@@ -192,8 +231,8 @@
                 e.printStackTrace();
             }
 
-            //Placed a marker to address places
-            if(addressList != null){
+            //Placed a marker to address found
+            if(addressList != null && addressList.size() != 0){
                 Address address = addressList.get(0);
                 LatLng latLng = new LatLng(address.getLatitude(), address.getLongitude());
                 mMap.addMarker(new MarkerOptions().position(latLng).title("Entered Location"));
@@ -203,45 +242,65 @@
         }
     }
 
-    @Override
-    public void onMapReady(GoogleMap googleMap) {
-        mMap = googleMap;
-        mMap.setOnMarkerClickListener(this);
-
-        if(ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED)
-        {
-
-            buildGoogleApiClient();
-            mMap.setMyLocationEnabled(true);
-        }
+    //Creates Popup View waits for feeback
+    public boolean onMarkerClick(final Marker marker){
+        lastLocationClicked = marker;
+        Intent intent = new Intent(this, PopupView.class);
+        startActivityForResult(intent,POPVIEW_ACTIVITY_REQUEST_CODE);
+        return false;
+    }
 
-        //Adds to the interaction with the map
-        mUiSettings = mMap.getUiSettings();
-        mUiSettings.setZoomControlsEnabled(true);
-        mUiSettings.setScrollGesturesEnabled(true);
-        mUiSettings.setZoomGesturesEnabled(true);
-
-
-        mMap.setOnMapLongClickListener(new GoogleMap.OnMapLongClickListener() {
-            @Override
-            public void onMapLongClick(LatLng point) {
-                MarkerOptions options = new MarkerOptions()
-                        .position(point);
-                Marker mMarker = mMap.addMarker(options);
+    //Interprets feedback from Popup View
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if(requestCode == POPVIEW_ACTIVITY_REQUEST_CODE){
+
+            //Deleting Marker button selected
+            if(resultCode == RESULT_OK){
+                lastLocationClicked.remove();
+            }
 
-                Geocoder geocoder = new Geocoder(getApplicationContext(), Locale.getDefault());
+            //Finding the address of the user and switches to new activity
+            if(resultCode == RESULT_FIRST_USER){
+                LatLng latlng = lastLocationClicked.getPosition();
+                Geocoder geocoder;
+                List<Address> addresses;
+                geocoder = new Geocoder(this, Locale.getDefault());
+
                 try {
-                    List<Address> addresses = geocoder.getFromLocation(point.latitude, point.longitude, 1);
-                    if (addresses != null && addresses.size() > 0){
-                        System.out.println("Address: " + addresses.get(0).toString());
+                    addresses = geocoder.getFromLocation(latlng.latitude, latlng.longitude, 1);
+                    if (addresses != null) {
+                        Intent intent = new Intent(this, InputNewAddress.class);
+                        if (addresses.get(0).getAddressLine(0) != null) {
+                            String address = addresses.get(0).getFeatureName() + " " + addresses.get(0).getThoroughfare();
+                            intent.putExtra("ADDRESS_1", address);
+                        }
+                        if (addresses.get(0).getLocality() != null) {
+                            String city = addresses.get(0).getLocality();
+                            intent.putExtra("CITY", city);
+                        }
+                        if (addresses.get(0).getAdminArea() != null) {
+                            String state = addresses.get(0).getAdminArea();
+                            intent.putExtra("STATE", state);
+                        }
+                        if (addresses.get(0).getPostalCode() != null) {
+                            String postalCode = addresses.get(0).getPostalCode();
+                            intent.putExtra("POSTAL_CODE", postalCode);
+                        }
+
+                        startActivity(intent);
                     }
                 } catch (IOException e) {
                     e.printStackTrace();
                 }
             }
-        });
+        }
+    }
 
-    }
+
+
+    //All the functions below are to determine the user's location
 
     protected synchronized void buildGoogleApiClient(){
         googleApiClient = new GoogleApiClient.Builder(this)
@@ -284,42 +343,6 @@
                 return;
         }
     }
-
-    public boolean onMarkerClick(final Marker marker){
-        LatLng latlng = marker.getPosition();
-        Geocoder geocoder;
-        List<Address> addresses;
-        geocoder = new Geocoder(this, Locale.getDefault());
-
-        try {
-            addresses = geocoder.getFromLocation(latlng.latitude, latlng.longitude, 1);
-            if (addresses != null) {
-                Intent intent = new Intent(this, PopupView.class);
-                if(addresses.get(0).getAddressLine(0) != null){
-                    String address = addresses.get(0).getFeatureName() + " " + addresses.get(0).getThoroughfare();
-                    intent.putExtra("ADDRESS_1", address);
-                }
-                if(addresses.get(0).getLocality() != null){
-                    String city = addresses.get(0).getLocality();
-                    intent.putExtra("CITY", city);
-                }
-                if(addresses.get(0).getAdminArea() != null){
-                    String state = addresses.get(0).getAdminArea();
-                    intent.putExtra("STATE", state);
-                }
-                if(addresses.get(0).getPostalCode() != null){
-                    String postalCode = addresses.get(0).getPostalCode();
-                    intent.putExtra("POSTAL_CODE", postalCode);
-                }
-                startActivity(intent);
-            }
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-
-        return false;
-    }
-
     @Override
     public void onLocationChanged(Location location) {
 
@@ -360,10 +383,8 @@
     }
 
     @Override
-    public void onConnectionSuspended(int i) {
-    }
+    public void onConnectionSuspended(int i) {}
 
     @Override
-    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {
-    }
+    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {}
 }
\ No newline at end of file
Index: app/src/main/res/menu/drawer_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    tools:showIn=\"navigation_view\">\n    <item android:checkableBehavior=\"single\">\n        <item android:id=\"@+id/nav_member\"\n            android:icon=\"@drawable/ic_pin_drop\"\n            android:title=\"Member\"/>\n\n        <item android:id=\"@+id/nav_beingTaught\"\n            android:icon=\"@drawable/ic_pin_drop\"\n            android:title=\"Person Being Taught\"/>\n\n        <item android:id=\"@+id/nav_notBeingTaught\"\n            android:icon=\"@drawable/ic_pin_drop\"\n            android:title=\"Person Not Being Taught\"/>\n\n        <item android:id=\"@+id/nav_hasInterest\"\n            android:icon=\"@drawable/ic_pin_drop\"\n            android:title=\"Person Has Interest\"/>\n\n        <item android:id=\"@+id/nav_softClosedHeart\"\n            android:icon=\"@drawable/ic_pin_drop\"\n            android:title=\"Soft and Closed Heart\"/>\n\n        <item android:id=\"@+id/nav_hardClosedHeart\"\n            android:icon=\"@drawable/ic_pin_drop\"\n            android:title=\"Hard and Closed Heart\"/>\n\n        <item android:id=\"@+id/nav_uncontacted\"\n            android:icon=\"@drawable/ic_pin_drop\"\n            android:title=\"Uncontacted\"/>\n\n\n    </item>\n\n</menu>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/drawer_menu.xml	(revision d7e41fa2e7381fc785d075a760fffc6216934c3e)
+++ app/src/main/res/menu/drawer_menu.xml	(date 1554503769000)
@@ -3,36 +3,13 @@
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     tools:showIn="navigation_view">
-    <item android:checkableBehavior="single">
-        <item android:id="@+id/nav_member"
-            android:icon="@drawable/ic_pin_drop"
-            android:title="Member"/>
-
-        <item android:id="@+id/nav_beingTaught"
-            android:icon="@drawable/ic_pin_drop"
-            android:title="Person Being Taught"/>
-
-        <item android:id="@+id/nav_notBeingTaught"
-            android:icon="@drawable/ic_pin_drop"
-            android:title="Person Not Being Taught"/>
-
-        <item android:id="@+id/nav_hasInterest"
-            android:icon="@drawable/ic_pin_drop"
-            android:title="Person Has Interest"/>
-
-        <item android:id="@+id/nav_softClosedHeart"
-            android:icon="@drawable/ic_pin_drop"
-            android:title="Soft and Closed Heart"/>
-
-        <item android:id="@+id/nav_hardClosedHeart"
-            android:icon="@drawable/ic_pin_drop"
-            android:title="Hard and Closed Heart"/>
-
-        <item android:id="@+id/nav_uncontacted"
-            android:icon="@drawable/ic_pin_drop"
-            android:title="Uncontacted"/>
-
-
+    <item android:checkableBehavior="single"
+        android:title="Pins">
+        <item android:id="@+id/nav_allPins"
+              android:icon="@drawable/ic_pin_drop"
+              android:title="Drop All Pins"/>
+        <item android:id="@+id/nav_citiesView"
+              android:icon="@drawable/ic_filter_view"
+              android:title="Cities View"/>
     </item>
-
 </menu>
\ No newline at end of file
